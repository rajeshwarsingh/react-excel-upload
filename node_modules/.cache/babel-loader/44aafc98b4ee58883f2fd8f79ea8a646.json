{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _dispatcher = require('./dispatcher');\n\nvar _dispatcher2 = _interopRequireDefault(_dispatcher);\n\nvar _helpers = require('./helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar CellComponent = function (_Component) {\n  _inherits(CellComponent, _Component);\n\n  function CellComponent(props) {\n    _classCallCheck(this, CellComponent);\n\n    var _this = _possibleConstructorReturn(this, (CellComponent.__proto__ || Object.getPrototypeOf(CellComponent)).call(this, props));\n\n    _this.state = {\n      editing: _this.props.editing,\n      changedValue: _this.props.value\n    };\n    return _this;\n  }\n  /**\r\n   * React \"render\" method, rendering the individual cell\r\n   */\n\n\n  _createClass(CellComponent, [{\n    key: 'render',\n    value: function render() {\n      var props = this.props,\n          selected = props.selected ? 'selected' : '',\n          ref = 'input_' + props.uid.join('_'),\n          config = props.config || {\n        emptyValueSymbol: ''\n      },\n          displayValue = props.value === '' || !props.value ? config.emptyValueSymbol : props.value,\n          cellClasses = props.cellClasses && props.cellClasses.length > 0 ? props.cellClasses + ' ' + selected : selected,\n          cellContent; // Check if header - if yes, render it\n\n      var header = this.renderHeader();\n\n      if (header) {\n        return header;\n      } // If not a header, check for editing and return\n\n\n      if (props.selected && props.editing) {\n        cellContent = _react2.default.createElement(\"input\", {\n          className: \"mousetrap\",\n          onChange: this.handleChange.bind(this),\n          onBlur: this.handleBlur.bind(this),\n          ref: ref,\n          defaultValue: this.props.value\n        });\n      }\n\n      return _react2.default.createElement(\"td\", {\n        className: cellClasses,\n        ref: props.uid.join('_')\n      }, _react2.default.createElement(\"div\", {\n        className: \"reactTableCell\"\n      }, cellContent, _react2.default.createElement(\"span\", {\n        onDoubleClick: this.handleDoubleClick.bind(this),\n        onClick: this.handleClick.bind(this)\n      }, displayValue)));\n    }\n    /**\r\n     * React \"componentDidUpdate\" method, ensuring correct input focus\r\n     * @param  {React previous properties} prevProps\r\n     * @param  {React previous state} prevState\r\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.editing && this.props.selected) {\n        var node = this.refs['input_' + this.props.uid.join('_')];\n        node.focus();\n      }\n\n      if (prevProps.selected && prevProps.editing && this.state.changedValue !== this.props.value) {\n        this.props.onCellValueChange(this.props.uid, this.state.changedValue);\n      }\n    }\n    /**\r\n     * Click handler for individual cell, ensuring navigation and selection\r\n     * @param  {event} e\r\n     */\n\n  }, {\n    key: 'handleClick',\n    value: function handleClick(e) {\n      var cellElement = this.refs[this.props.uid.join('_')];\n      this.props.handleSelectCell(this.props.uid, cellElement);\n    }\n    /**\r\n     * Click handler for individual cell if the cell is a header cell\r\n     * @param  {event} e\r\n     */\n\n  }, {\n    key: 'handleHeadClick',\n    value: function handleHeadClick(e) {\n      var cellElement = this.refs[this.props.uid.join('_')];\n\n      _dispatcher2.default.publish('headCellClicked', cellElement, this.props.spreadsheetId);\n    }\n    /**\r\n     * Double click handler for individual cell, ensuring navigation and selection\r\n     * @param  {event} e\r\n     */\n\n  }, {\n    key: 'handleDoubleClick',\n    value: function handleDoubleClick(e) {\n      e.preventDefault();\n      this.props.handleDoubleClickOnCell(this.props.uid);\n    }\n    /**\r\n     * Blur handler for individual cell\r\n     * @param  {event} e\r\n     */\n\n  }, {\n    key: 'handleBlur',\n    value: function handleBlur(e) {\n      var newValue = this.refs['input_' + this.props.uid.join('_')].value;\n      this.props.onCellValueChange(this.props.uid, newValue, e);\n      this.props.handleCellBlur(this.props.uid);\n\n      _dispatcher2.default.publish('cellBlurred', this.props.uid, this.props.spreadsheetId);\n    }\n    /**\r\n     * Change handler for an individual cell, propagating the value change\r\n     * @param  {event} e\r\n     */\n\n  }, {\n    key: 'handleChange',\n    value: function handleChange(e) {\n      var newValue = this.refs['input_' + this.props.uid.join('_')].value;\n      this.setState({\n        changedValue: newValue\n      });\n    }\n    /**\r\n     * Checks if a header exists - if it does, it returns a header object\r\n     * @return {false|react} [Either false if it's not a header cell, a react object if it is]\r\n     */\n\n  }, {\n    key: 'renderHeader',\n    value: function renderHeader() {\n      var props = this.props,\n          selected = props.selected ? 'selected' : '',\n          uid = props.uid,\n          config = props.config || {\n        emptyValueSymbol: ''\n      },\n          displayValue = props.value === '' || !props.value ? config.emptyValueSymbol : props.value,\n          cellClasses = props.cellClasses && props.cellClasses.length > 0 ? this.props.cellClasses + ' ' + selected : selected; // Cases\n\n      var headRow = uid[0] === 0,\n          headColumn = uid[1] === 0,\n          headRowAndEnabled = config.hasHeadRow && uid[0] === 0,\n          headColumnAndEnabled = config.hasHeadColumn && uid[1] === 0; // Head Row enabled, cell is in head row\n      // Head Column enabled, cell is in head column\n\n      if (headRowAndEnabled || headColumnAndEnabled) {\n        if (headColumn && config.hasLetterNumberHeads) {\n          displayValue = uid[0];\n        } else if (headRow && config.hasLetterNumberHeads) {\n          displayValue = _helpers2.default.countWithLetters(uid[1]);\n        }\n\n        if (config.isHeadRowString && headRow || config.isHeadColumnString && headColumn) {\n          return _react2.default.createElement(\"th\", {\n            className: cellClasses,\n            ref: this.props.uid.join('_')\n          }, _react2.default.createElement(\"div\", null, _react2.default.createElement(\"span\", {\n            onClick: this.handleHeadClick.bind(this)\n          }, displayValue)));\n        } else {\n          return _react2.default.createElement(\"th\", {\n            ref: this.props.uid.join('_')\n          }, displayValue);\n        }\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return CellComponent;\n}(_react.Component);\n\nmodule.exports = CellComponent;","map":null,"metadata":{},"sourceType":"script"}