{"ast":null,"code":"'use strict';\n\nvar Helpers = {\n  /**\r\n   * Find the first element in an array matching a boolean\r\n   * @param  {[array]} arr     [Array to test]\r\n   * @param  {[function]} test [Test Function]\r\n   * @param  {[type]} context  [Context]\r\n   * @return {[object]}        [Found element]\r\n   */\n  firstInArray: function firstInArray(arr, test, context) {\n    var result = null;\n    arr.some(function (el, i) {\n      return test.call(context, el, i, arr) ? (result = el, true) : false;\n    });\n    return result;\n  },\n\n  /**\r\n   * Find the first TD in a path array\r\n   * @param  {[array]} arr  [Path array containing elements]\r\n   * @return {[object]}     [Found element]\r\n   */\n  firstTDinArray: function firstTDinArray(arr) {\n    var cell = Helpers.firstInArray(arr, function (element) {\n      if (element.nodeName && element.nodeName === 'TD') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return cell;\n  },\n\n  /**\r\n   * Check if two cell objects reference the same cell\r\n   * @param  {[array]} cell1 [First cell]\r\n   * @param  {[array]} cell2 [Second cell]\r\n   * @return {[boolean]}    [Boolean indicating if the cells are equal]\r\n   */\n  equalCells: function equalCells(cell1, cell2) {\n    if (!cell1 || !cell2 || cell1.length !== cell2.length) {\n      return false;\n    }\n\n    if (cell1[0] === cell2[0] && cell1[1] === cell2[1]) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  /**\r\n   * Counts in letters (A, B, C...Z, AA);\r\n   * @return {[string]} [Letter]\r\n   */\n  countWithLetters: function countWithLetters(num) {\n    var mod = num % 26,\n        pow = num / 26 | 0,\n        out = mod ? String.fromCharCode(64 + mod) : (--pow, 'Z');\n    return pow ? this.countWithLetters(pow) + out : out;\n  },\n\n  /**\r\n   * Creates a random 5-character id\r\n   * @return {string} [Somewhat random id]\r\n   */\n  makeSpreadsheetId: function makeSpreadsheetId() {\n    var text = '',\n        possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n    for (var i = 0; i < 5; i = i + 1) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n\n    return text;\n  }\n};\nmodule.exports = Helpers;","map":null,"metadata":{},"sourceType":"script"}