{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _row = require('./row');\n\nvar _row2 = _interopRequireDefault(_row);\n\nvar _dispatcher = require('./dispatcher');\n\nvar _dispatcher2 = _interopRequireDefault(_dispatcher);\n\nvar _helpers = require('./helpers');\n\nvar _helpers2 = _interopRequireDefault(_helpers);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar $ = require('jquery');\n\nvar SpreadsheetComponent = function (_Component) {\n  _inherits(SpreadsheetComponent, _Component);\n\n  function SpreadsheetComponent(props) {\n    _classCallCheck(this, SpreadsheetComponent);\n\n    var _this = _possibleConstructorReturn(this, (SpreadsheetComponent.__proto__ || Object.getPrototypeOf(SpreadsheetComponent)).call(this, props));\n\n    var initialData = _this.props.initialData || {};\n\n    if (!initialData.rows) {\n      initialData.rows = [];\n\n      for (var i = 0; i < _this.props.config.rows; i = i + 1) {\n        initialData.rows[i] = [];\n\n        for (var ci = 0; ci < _this.props.config.columns; ci = ci + 1) {\n          initialData.rows[i][ci] = '';\n        }\n      }\n    }\n\n    _this.state = {\n      data: initialData,\n      selected: null,\n      lastBlurred: null,\n      selectedElement: null,\n      editing: false,\n      id: _this.props.spreadsheetId || _helpers2.default.makeSpreadsheetId()\n    };\n    return _this;\n  }\n  /**\r\n   * React 'componentDidMount' method\r\n   */\n\n\n  _createClass(SpreadsheetComponent, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this.bindKeyboard();\n      $('body').on('focus', 'input', function (e) {\n        $(this).one('mouseup', function () {\n          $(this).select();\n          return false;\n        }).select();\n      });\n    }\n    /**\r\n     * React Render method\r\n     * @return {[JSX]} [JSX to render]\r\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var data = this.state.data,\n          config = this.props.config,\n          _cellClasses = this.props.cellClasses,\n          rows = [],\n          key,\n          i,\n          cellClasses; // Sanity checks\n\n      if (!data.rows && !config.rows) {\n        return console.error('Table Component: Number of colums not defined in both data and config!');\n      } // Create Rows\n\n\n      for (i = 0; i < data.rows.length; i = i + 1) {\n        key = 'row_' + i;\n        cellClasses = _cellClasses && _cellClasses.rows && _cellClasses.rows[i] ? _cellClasses.rows[i] : null;\n        rows.push(_react2.default.createElement(_row2.default, {\n          cells: data.rows[i],\n          cellClasses: cellClasses,\n          uid: i,\n          key: key,\n          config: config,\n          selected: this.state.selected,\n          editing: this.state.editing,\n          handleSelectCell: this.handleSelectCell.bind(this),\n          handleDoubleClickOnCell: this.handleDoubleClickOnCell.bind(this),\n          handleCellBlur: this.handleCellBlur.bind(this),\n          onCellValueChange: this.handleCellValueChange.bind(this),\n          spreadsheetId: this.state.id,\n          className: \"cellComponent\"\n        }));\n      }\n\n      return _react2.default.createElement(\"table\", {\n        tabIndex: \"0\",\n        \"data-spreasheet-id\": this.state.id,\n        ref: \"react-spreadsheet-\" + this.state.id\n      }, _react2.default.createElement(\"tbody\", null, rows));\n    }\n    /**\r\n     * Binds the various keyboard events dispatched to table functions\r\n     */\n\n  }, {\n    key: 'bindKeyboard',\n    value: function bindKeyboard() {\n      var _this2 = this;\n\n      _dispatcher2.default.setupKeyboardShortcuts($(this.refs[\"react-spreadsheet-\" + this.state.id])[0], this.state.id);\n\n      _dispatcher2.default.subscribe('up_keyup', function (data) {\n        _this2.navigateTable('up', data);\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('down_keyup', function (data) {\n        _this2.navigateTable('down', data);\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('left_keyup', function (data) {\n        _this2.navigateTable('left', data);\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('right_keyup', function (data) {\n        _this2.navigateTable('right', data);\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('tab_keyup', function (data) {\n        _this2.navigateTable('right', data, null, true);\n      }, this.state.id); // Prevent brower's from jumping to URL bar\n\n\n      _dispatcher2.default.subscribe('tab_keydown', function (data) {\n        if ($(document.activeElement) && $(document.activeElement)[0].tagName === 'INPUT') {\n          if (data.preventDefault) {\n            data.preventDefault();\n          } else {\n            // Oh, old IE, you ðŸ’©\n            data.returnValue = false;\n          }\n        }\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('remove_keydown', function (data) {\n        if (!$(data.target).is('input, textarea')) {\n          if (data.preventDefault) {\n            data.preventDefault();\n          } else {\n            // Oh, old IE, you ðŸ’©\n            data.returnValue = false;\n          }\n        }\n      }, this.state.id);\n\n      _dispatcher2.default.subscribe('enter_keyup', function () {\n        if (_this2.state.selectedElement) {\n          _this2.setState({\n            editing: !_this2.state.editing\n          });\n        }\n\n        $(_this2.refs[\"react-spreadsheet-\" + _this2.state.id]).first().focus();\n      }, this.state.id); // Go into edit mode when the user starts typing on a field\n\n\n      _dispatcher2.default.subscribe('letter_keydown', function () {\n        if (!_this2.state.editing && _this2.state.selectedElement) {\n          _dispatcher2.default.publish('editStarted', _this2.state.selectedElement, _this2.state.id);\n\n          _this2.setState({\n            editing: true\n          });\n        }\n      }, this.state.id); // Delete on backspace and delete\n\n\n      _dispatcher2.default.subscribe('remove_keyup', function () {\n        if (_this2.state.selected && !_helpers2.default.equalCells(_this2.state.selected, _this2.state.lastBlurred)) {\n          _this2.handleCellValueChange(_this2.state.selected, '');\n        }\n      }, this.state.id);\n    }\n    /**\r\n     * Navigates the table and moves selection\r\n     * @param  {string} direction                               [Direction ('up' || 'down' || 'left' || 'right')]\r\n     * @param  {Array: [number: row, number: cell]} originCell  [Origin Cell]\r\n     * @param  {boolean} inEdit                                 [Currently editing]\r\n     */\n\n  }, {\n    key: 'navigateTable',\n    value: function navigateTable(direction, data, originCell, inEdit) {\n      // Only traverse the table if the user isn't editing a cell,\n      // unless override is given\n      if (!inEdit && this.state.editing) {\n        return false;\n      } // Use the curently active cell if one isn't passed\n\n\n      if (!originCell) {\n        originCell = this.state.selectedElement;\n      } // Prevent default\n\n\n      if (data.preventDefault) {\n        data.preventDefault();\n      } else {\n        // Oh, old IE, you ðŸ’©\n        data.returnValue = false;\n      }\n\n      var $origin = $(originCell),\n          cellIndex = $origin.index(),\n          target;\n\n      if (direction === 'up') {\n        target = $origin.closest('tr').prev().children().eq(cellIndex).find('span');\n      } else if (direction === 'down') {\n        target = $origin.closest('tr').next().children().eq(cellIndex).find('span');\n      } else if (direction === 'left') {\n        target = $origin.closest('td').prev().find('span');\n      } else if (direction === 'right') {\n        target = $origin.closest('td').next().find('span');\n      }\n\n      if (target.length > 0) {\n        target.click();\n      } else {\n        this.extendTable(direction, originCell);\n      }\n    }\n    /**\r\n     * Extends the table with an additional row/column, if permitted by config\r\n     * @param  {string} direction [Direction ('up' || 'down' || 'left' || 'right')]\r\n     */\n\n  }, {\n    key: 'extendTable',\n    value: function extendTable(direction) {\n      var config = this.props.config,\n          data = this.state.data,\n          newRow,\n          i;\n\n      if (direction === 'down' && config.canAddRow) {\n        newRow = [];\n\n        for (i = 0; i < this.state.data.rows[0].length; i = i + 1) {\n          newRow[i] = '';\n        }\n\n        data.rows.push(newRow);\n\n        _dispatcher2.default.publish('rowCreated', data.rows.length, this.state.id);\n\n        return this.setState({\n          data: data\n        });\n      }\n\n      if (direction === 'right' && config.canAddColumn) {\n        for (i = 0; i < data.rows.length; i = i + 1) {\n          data.rows[i].push('');\n        }\n\n        _dispatcher2.default.publish('columnCreated', data.rows[0].length, this.state.id);\n\n        return this.setState({\n          data: data\n        });\n      }\n    }\n    /**\r\n     * Callback for 'selectCell', updating the selected Cell\r\n     * @param  {Array: [number: row, number: cell]} cell [Selected Cell]\r\n     * @param  {object} cellElement [Selected Cell Element]\r\n     */\n\n  }, {\n    key: 'handleSelectCell',\n    value: function handleSelectCell(cell, cellElement) {\n      _dispatcher2.default.publish('cellSelected', cell, this.state.id);\n\n      $(this.refs[\"react-spreadsheet-\" + this.state.id]).first().focus();\n      this.setState({\n        selected: cell,\n        selectedElement: cellElement\n      });\n    }\n    /**\r\n     * Callback for 'cellValueChange', updating the cell data\r\n     * @param  {Array: [number: row, number: cell]} cell [Selected Cell]\r\n     * @param  {object} newValue                         [Value to set]\r\n     */\n\n  }, {\n    key: 'handleCellValueChange',\n    value: function handleCellValueChange(cell, newValue) {\n      var data = this.state.data,\n          row = cell[0],\n          column = cell[1],\n          oldValue = data.rows[row][column];\n\n      _dispatcher2.default.publish('cellValueChanged', [cell, newValue, oldValue], this.state.id);\n\n      data.rows[row][column] = newValue;\n      this.setState({\n        data: data\n      });\n\n      _dispatcher2.default.publish('dataChanged', data, this.state.id);\n    }\n    /**\r\n     * Callback for 'doubleClickonCell', enabling 'edit' mode\r\n     */\n\n  }, {\n    key: 'handleDoubleClickOnCell',\n    value: function handleDoubleClickOnCell() {\n      this.setState({\n        editing: true\n      });\n    }\n    /**\r\n     * Callback for 'cellBlur'\r\n     */\n\n  }, {\n    key: 'handleCellBlur',\n    value: function handleCellBlur(cell) {\n      if (this.state.editing) {\n        _dispatcher2.default.publish('editStopped', this.state.selectedElement);\n      }\n\n      this.setState({\n        editing: false,\n        lastBlurred: cell\n      });\n    }\n  }]);\n\n  return SpreadsheetComponent;\n}(_react.Component);\n\nmodule.exports = SpreadsheetComponent;","map":null,"metadata":{},"sourceType":"script"}